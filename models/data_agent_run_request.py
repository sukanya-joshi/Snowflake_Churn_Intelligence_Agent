# coding: utf-8

"""
    Cortex Agent REST API

    OpenAPI 3.1 specification for the Cortex Agent REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@snowflake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from models.data_agent_run_request_execution_trace import DataAgentRunRequestExecutionTrace
from models.message import Message
from models.tool_choice import ToolChoice
from typing import Optional, Set
from typing_extensions import Self

class DataAgentRunRequest(BaseModel):
    """
    The request object for running the Data Cortex agent. 
    """ # noqa: E501
    thread_id: Optional[StrictInt] = Field(default=None, description="The id of the thread. ")
    parent_message_id: Optional[StrictInt] = Field(default=None, description="The id of the message from which this run should begin. ")
    messages: Annotated[List[Message], Field(min_length=1)] = Field(description="If thread id and parent message id are present, the current user messages in this conversation turn. Else, the conversation history and current message. Contains both user queries and assistant responses in chronological order. ")
    execution_trace: Optional[DataAgentRunRequestExecutionTrace] = None
    tool_choice: Optional[ToolChoice] = None
    experimental: Optional[Dict[str, Any]] = Field(default=None, description="reserved")
    __properties: ClassVar[List[str]] = ["thread_id", "parent_message_id", "messages", "execution_trace", "tool_choice", "experimental"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataAgentRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of execution_trace
        if self.execution_trace:
            _dict['execution_trace'] = self.execution_trace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_choice
        if self.tool_choice:
            _dict['tool_choice'] = self.tool_choice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataAgentRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "thread_id": obj.get("thread_id"),
            "parent_message_id": obj.get("parent_message_id"),
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "execution_trace": DataAgentRunRequestExecutionTrace.from_dict(obj["execution_trace"]) if obj.get("execution_trace") is not None else None,
            "tool_choice": ToolChoice.from_dict(obj["tool_choice"]) if obj.get("tool_choice") is not None else None,
            "experimental": obj.get("experimental")
        })
        return _obj


