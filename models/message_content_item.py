# coding: utf-8

"""
    Cortex Agent REST API

    OpenAPI 3.1 specification for the Cortex Agent REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@snowflake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from models.chart_content_item import ChartContentItem
from models.suggested_queries_content_item import SuggestedQueriesContentItem
from models.table_content_item import TableContentItem
from models.text_content_item import TextContentItem
from models.thinking_content_item import ThinkingContentItem
from models.tool_result_content_item import ToolResultContentItem
from models.tool_use_content_item import ToolUseContentItem
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

MESSAGECONTENTITEM_ONE_OF_SCHEMAS = ["ChartContentItem", "SuggestedQueriesContentItem", "TableContentItem", "TextContentItem", "ThinkingContentItem", "ToolResultContentItem", "ToolUseContentItem"]

class MessageContentItem(BaseModel):
    """
    MessageContentItem
    """
    # data type: TextContentItem
    oneof_schema_1_validator: Optional[TextContentItem] = None
    # data type: ThinkingContentItem
    oneof_schema_2_validator: Optional[ThinkingContentItem] = None
    # data type: ToolUseContentItem
    oneof_schema_3_validator: Optional[ToolUseContentItem] = None
    # data type: ToolResultContentItem
    oneof_schema_4_validator: Optional[ToolResultContentItem] = None
    # data type: TableContentItem
    oneof_schema_5_validator: Optional[TableContentItem] = None
    # data type: ChartContentItem
    oneof_schema_6_validator: Optional[ChartContentItem] = None
    # data type: SuggestedQueriesContentItem
    oneof_schema_7_validator: Optional[SuggestedQueriesContentItem] = None
    actual_instance: Optional[Union[ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem]] = None
    one_of_schemas: Set[str] = { "ChartContentItem", "SuggestedQueriesContentItem", "TableContentItem", "TextContentItem", "ThinkingContentItem", "ToolResultContentItem", "ToolUseContentItem" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MessageContentItem.model_construct()
        error_messages = []
        match = 0
        # validate data type: TextContentItem
        if not isinstance(v, TextContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextContentItem`")
        else:
            match += 1
        # validate data type: ThinkingContentItem
        if not isinstance(v, ThinkingContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ThinkingContentItem`")
        else:
            match += 1
        # validate data type: ToolUseContentItem
        if not isinstance(v, ToolUseContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolUseContentItem`")
        else:
            match += 1
        # validate data type: ToolResultContentItem
        if not isinstance(v, ToolResultContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolResultContentItem`")
        else:
            match += 1
        # validate data type: TableContentItem
        if not isinstance(v, TableContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TableContentItem`")
        else:
            match += 1
        # validate data type: ChartContentItem
        if not isinstance(v, ChartContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChartContentItem`")
        else:
            match += 1
        # validate data type: SuggestedQueriesContentItem
        if not isinstance(v, SuggestedQueriesContentItem):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SuggestedQueriesContentItem`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MessageContentItem with oneOf schemas: ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MessageContentItem with oneOf schemas: ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `type` in the input.")

        # check if data type is `ChartContentItem`
        if _data_type == "chart":
            instance.actual_instance = ChartContentItem.from_json(json_str)
            return instance

        # check if data type is `SuggestedQueriesContentItem`
        if _data_type == "suggested_queries":
            instance.actual_instance = SuggestedQueriesContentItem.from_json(json_str)
            return instance

        # check if data type is `TableContentItem`
        if _data_type == "table":
            instance.actual_instance = TableContentItem.from_json(json_str)
            return instance

        # check if data type is `TextContentItem`
        if _data_type == "text":
            instance.actual_instance = TextContentItem.from_json(json_str)
            return instance

        # check if data type is `ThinkingContentItem`
        if _data_type == "thinking":
            instance.actual_instance = ThinkingContentItem.from_json(json_str)
            return instance

        # check if data type is `ToolResultContentItem`
        if _data_type == "tool_result":
            instance.actual_instance = ToolResultContentItem.from_json(json_str)
            return instance

        # check if data type is `ToolUseContentItem`
        if _data_type == "tool_use":
            instance.actual_instance = ToolUseContentItem.from_json(json_str)
            return instance

        # check if data type is `ChartContentItem`
        if _data_type == "ChartContentItem":
            instance.actual_instance = ChartContentItem.from_json(json_str)
            return instance

        # check if data type is `SuggestedQueriesContentItem`
        if _data_type == "SuggestedQueriesContentItem":
            instance.actual_instance = SuggestedQueriesContentItem.from_json(json_str)
            return instance

        # check if data type is `TableContentItem`
        if _data_type == "TableContentItem":
            instance.actual_instance = TableContentItem.from_json(json_str)
            return instance

        # check if data type is `TextContentItem`
        if _data_type == "TextContentItem":
            instance.actual_instance = TextContentItem.from_json(json_str)
            return instance

        # check if data type is `ThinkingContentItem`
        if _data_type == "ThinkingContentItem":
            instance.actual_instance = ThinkingContentItem.from_json(json_str)
            return instance

        # check if data type is `ToolResultContentItem`
        if _data_type == "ToolResultContentItem":
            instance.actual_instance = ToolResultContentItem.from_json(json_str)
            return instance

        # check if data type is `ToolUseContentItem`
        if _data_type == "ToolUseContentItem":
            instance.actual_instance = ToolUseContentItem.from_json(json_str)
            return instance

        # deserialize data into TextContentItem
        try:
            instance.actual_instance = TextContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ThinkingContentItem
        try:
            instance.actual_instance = ThinkingContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ToolUseContentItem
        try:
            instance.actual_instance = ToolUseContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ToolResultContentItem
        try:
            instance.actual_instance = ToolResultContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TableContentItem
        try:
            instance.actual_instance = TableContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChartContentItem
        try:
            instance.actual_instance = ChartContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SuggestedQueriesContentItem
        try:
            instance.actual_instance = SuggestedQueriesContentItem.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MessageContentItem with oneOf schemas: ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MessageContentItem with oneOf schemas: ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ChartContentItem, SuggestedQueriesContentItem, TableContentItem, TextContentItem, ThinkingContentItem, ToolResultContentItem, ToolUseContentItem]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


