# coding: utf-8

"""
    Cortex Agent REST API

    OpenAPI 3.1 specification for the Cortex Agent REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@snowflake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from models.analyst_tool_result_delta_event import AnalystToolResultDeltaEvent
from models.chart_event import ChartEvent
from models.error_event import ErrorEvent
from models.response_event import ResponseEvent
from models.response_text_annotation_event import ResponseTextAnnotationEvent
from models.status_event import StatusEvent
from models.suggested_queries_event import SuggestedQueriesEvent
from models.table_event import TableEvent
from models.text_delta_event import TextDeltaEvent
from models.text_event import TextEvent
from models.thinking_delta_event import ThinkingDeltaEvent
from models.thinking_event import ThinkingEvent
from models.tool_result_event import ToolResultEvent
from models.tool_result_status_event import ToolResultStatusEvent
from models.tool_use_event import ToolUseEvent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SERVERSENTEVENT_ONE_OF_SCHEMAS = ["AnalystToolResultDeltaEvent", "ChartEvent", "ErrorEvent", "ResponseEvent", "ResponseTextAnnotationEvent", "StatusEvent", "SuggestedQueriesEvent", "TableEvent", "TextDeltaEvent", "TextEvent", "ThinkingDeltaEvent", "ThinkingEvent", "ToolResultEvent", "ToolResultStatusEvent", "ToolUseEvent"]

class ServerSentEvent(BaseModel):
    """
    ServerSentEvent
    """
    # data type: ResponseEvent
    oneof_schema_1_validator: Optional[ResponseEvent] = None
    # data type: TextEvent
    oneof_schema_2_validator: Optional[TextEvent] = None
    # data type: TextDeltaEvent
    oneof_schema_3_validator: Optional[TextDeltaEvent] = None
    # data type: ResponseTextAnnotationEvent
    oneof_schema_4_validator: Optional[ResponseTextAnnotationEvent] = None
    # data type: ThinkingEvent
    oneof_schema_5_validator: Optional[ThinkingEvent] = None
    # data type: ThinkingDeltaEvent
    oneof_schema_6_validator: Optional[ThinkingDeltaEvent] = None
    # data type: ToolUseEvent
    oneof_schema_7_validator: Optional[ToolUseEvent] = None
    # data type: ToolResultEvent
    oneof_schema_8_validator: Optional[ToolResultEvent] = None
    # data type: ToolResultStatusEvent
    oneof_schema_9_validator: Optional[ToolResultStatusEvent] = None
    # data type: AnalystToolResultDeltaEvent
    oneof_schema_10_validator: Optional[AnalystToolResultDeltaEvent] = None
    # data type: TableEvent
    oneof_schema_11_validator: Optional[TableEvent] = None
    # data type: ChartEvent
    oneof_schema_12_validator: Optional[ChartEvent] = None
    # data type: StatusEvent
    oneof_schema_13_validator: Optional[StatusEvent] = None
    # data type: SuggestedQueriesEvent
    oneof_schema_14_validator: Optional[SuggestedQueriesEvent] = None
    # data type: ErrorEvent
    oneof_schema_15_validator: Optional[ErrorEvent] = None
    actual_instance: Optional[Union[AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent]] = None
    one_of_schemas: Set[str] = { "AnalystToolResultDeltaEvent", "ChartEvent", "ErrorEvent", "ResponseEvent", "ResponseTextAnnotationEvent", "StatusEvent", "SuggestedQueriesEvent", "TableEvent", "TextDeltaEvent", "TextEvent", "ThinkingDeltaEvent", "ThinkingEvent", "ToolResultEvent", "ToolResultStatusEvent", "ToolUseEvent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ServerSentEvent.model_construct()
        error_messages = []
        match = 0
        # validate data type: ResponseEvent
        if not isinstance(v, ResponseEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseEvent`")
        else:
            match += 1
        # validate data type: TextEvent
        if not isinstance(v, TextEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextEvent`")
        else:
            match += 1
        # validate data type: TextDeltaEvent
        if not isinstance(v, TextDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TextDeltaEvent`")
        else:
            match += 1
        # validate data type: ResponseTextAnnotationEvent
        if not isinstance(v, ResponseTextAnnotationEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResponseTextAnnotationEvent`")
        else:
            match += 1
        # validate data type: ThinkingEvent
        if not isinstance(v, ThinkingEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ThinkingEvent`")
        else:
            match += 1
        # validate data type: ThinkingDeltaEvent
        if not isinstance(v, ThinkingDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ThinkingDeltaEvent`")
        else:
            match += 1
        # validate data type: ToolUseEvent
        if not isinstance(v, ToolUseEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolUseEvent`")
        else:
            match += 1
        # validate data type: ToolResultEvent
        if not isinstance(v, ToolResultEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolResultEvent`")
        else:
            match += 1
        # validate data type: ToolResultStatusEvent
        if not isinstance(v, ToolResultStatusEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolResultStatusEvent`")
        else:
            match += 1
        # validate data type: AnalystToolResultDeltaEvent
        if not isinstance(v, AnalystToolResultDeltaEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnalystToolResultDeltaEvent`")
        else:
            match += 1
        # validate data type: TableEvent
        if not isinstance(v, TableEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TableEvent`")
        else:
            match += 1
        # validate data type: ChartEvent
        if not isinstance(v, ChartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChartEvent`")
        else:
            match += 1
        # validate data type: StatusEvent
        if not isinstance(v, StatusEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StatusEvent`")
        else:
            match += 1
        # validate data type: SuggestedQueriesEvent
        if not isinstance(v, SuggestedQueriesEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SuggestedQueriesEvent`")
        else:
            match += 1
        # validate data type: ErrorEvent
        if not isinstance(v, ErrorEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorEvent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ServerSentEvent with oneOf schemas: AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ServerSentEvent with oneOf schemas: AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("event")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `event` in the input.")

        # check if data type is `ErrorEvent`
        if _data_type == "error":
            instance.actual_instance = ErrorEvent.from_json(json_str)
            return instance

        # check if data type is `ResponseEvent`
        if _data_type == "response":
            instance.actual_instance = ResponseEvent.from_json(json_str)
            return instance

        # check if data type is `ChartEvent`
        if _data_type == "response.chart":
            instance.actual_instance = ChartEvent.from_json(json_str)
            return instance

        # check if data type is `StatusEvent`
        if _data_type == "response.status":
            instance.actual_instance = StatusEvent.from_json(json_str)
            return instance

        # check if data type is `SuggestedQueriesEvent`
        if _data_type == "response.suggested_queries":
            instance.actual_instance = SuggestedQueriesEvent.from_json(json_str)
            return instance

        # check if data type is `TableEvent`
        if _data_type == "response.table":
            instance.actual_instance = TableEvent.from_json(json_str)
            return instance

        # check if data type is `TextEvent`
        if _data_type == "response.text":
            instance.actual_instance = TextEvent.from_json(json_str)
            return instance

        # check if data type is `ResponseTextAnnotationEvent`
        if _data_type == "response.text.annotation":
            instance.actual_instance = ResponseTextAnnotationEvent.from_json(json_str)
            return instance

        # check if data type is `TextDeltaEvent`
        if _data_type == "response.text.delta":
            instance.actual_instance = TextDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `ThinkingEvent`
        if _data_type == "response.thinking":
            instance.actual_instance = ThinkingEvent.from_json(json_str)
            return instance

        # check if data type is `ThinkingDeltaEvent`
        if _data_type == "response.thinking.delta":
            instance.actual_instance = ThinkingDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `ToolResultEvent`
        if _data_type == "response.tool_result":
            instance.actual_instance = ToolResultEvent.from_json(json_str)
            return instance

        # check if data type is `AnalystToolResultDeltaEvent`
        if _data_type == "response.tool_result.analyst.delta":
            instance.actual_instance = AnalystToolResultDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `ToolResultStatusEvent`
        if _data_type == "response.tool_result.status":
            instance.actual_instance = ToolResultStatusEvent.from_json(json_str)
            return instance

        # check if data type is `ToolUseEvent`
        if _data_type == "response.tool_use":
            instance.actual_instance = ToolUseEvent.from_json(json_str)
            return instance

        # check if data type is `AnalystToolResultDeltaEvent`
        if _data_type == "AnalystToolResultDeltaEvent":
            instance.actual_instance = AnalystToolResultDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `ChartEvent`
        if _data_type == "ChartEvent":
            instance.actual_instance = ChartEvent.from_json(json_str)
            return instance

        # check if data type is `ErrorEvent`
        if _data_type == "ErrorEvent":
            instance.actual_instance = ErrorEvent.from_json(json_str)
            return instance

        # check if data type is `ResponseEvent`
        if _data_type == "ResponseEvent":
            instance.actual_instance = ResponseEvent.from_json(json_str)
            return instance

        # check if data type is `ResponseTextAnnotationEvent`
        if _data_type == "ResponseTextAnnotationEvent":
            instance.actual_instance = ResponseTextAnnotationEvent.from_json(json_str)
            return instance

        # check if data type is `StatusEvent`
        if _data_type == "StatusEvent":
            instance.actual_instance = StatusEvent.from_json(json_str)
            return instance

        # check if data type is `SuggestedQueriesEvent`
        if _data_type == "SuggestedQueriesEvent":
            instance.actual_instance = SuggestedQueriesEvent.from_json(json_str)
            return instance

        # check if data type is `TableEvent`
        if _data_type == "TableEvent":
            instance.actual_instance = TableEvent.from_json(json_str)
            return instance

        # check if data type is `TextDeltaEvent`
        if _data_type == "TextDeltaEvent":
            instance.actual_instance = TextDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `TextEvent`
        if _data_type == "TextEvent":
            instance.actual_instance = TextEvent.from_json(json_str)
            return instance

        # check if data type is `ThinkingDeltaEvent`
        if _data_type == "ThinkingDeltaEvent":
            instance.actual_instance = ThinkingDeltaEvent.from_json(json_str)
            return instance

        # check if data type is `ThinkingEvent`
        if _data_type == "ThinkingEvent":
            instance.actual_instance = ThinkingEvent.from_json(json_str)
            return instance

        # check if data type is `ToolResultEvent`
        if _data_type == "ToolResultEvent":
            instance.actual_instance = ToolResultEvent.from_json(json_str)
            return instance

        # check if data type is `ToolResultStatusEvent`
        if _data_type == "ToolResultStatusEvent":
            instance.actual_instance = ToolResultStatusEvent.from_json(json_str)
            return instance

        # check if data type is `ToolUseEvent`
        if _data_type == "ToolUseEvent":
            instance.actual_instance = ToolUseEvent.from_json(json_str)
            return instance

        # deserialize data into ResponseEvent
        try:
            instance.actual_instance = ResponseEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextEvent
        try:
            instance.actual_instance = TextEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TextDeltaEvent
        try:
            instance.actual_instance = TextDeltaEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ResponseTextAnnotationEvent
        try:
            instance.actual_instance = ResponseTextAnnotationEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ThinkingEvent
        try:
            instance.actual_instance = ThinkingEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ThinkingDeltaEvent
        try:
            instance.actual_instance = ThinkingDeltaEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ToolUseEvent
        try:
            instance.actual_instance = ToolUseEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ToolResultEvent
        try:
            instance.actual_instance = ToolResultEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ToolResultStatusEvent
        try:
            instance.actual_instance = ToolResultStatusEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnalystToolResultDeltaEvent
        try:
            instance.actual_instance = AnalystToolResultDeltaEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TableEvent
        try:
            instance.actual_instance = TableEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChartEvent
        try:
            instance.actual_instance = ChartEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StatusEvent
        try:
            instance.actual_instance = StatusEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SuggestedQueriesEvent
        try:
            instance.actual_instance = SuggestedQueriesEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorEvent
        try:
            instance.actual_instance = ErrorEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ServerSentEvent with oneOf schemas: AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ServerSentEvent with oneOf schemas: AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AnalystToolResultDeltaEvent, ChartEvent, ErrorEvent, ResponseEvent, ResponseTextAnnotationEvent, StatusEvent, SuggestedQueriesEvent, TableEvent, TextDeltaEvent, TextEvent, ThinkingDeltaEvent, ThinkingEvent, ToolResultEvent, ToolResultStatusEvent, ToolUseEvent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


