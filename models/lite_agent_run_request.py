# coding: utf-8

"""
    Cortex Agent REST API

    OpenAPI 3.1 specification for the Cortex Agent REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@snowflake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from models.lite_agent_run_request_instructions import LiteAgentRunRequestInstructions
from models.lite_agent_run_request_models import LiteAgentRunRequestModels
from models.message import Message
from models.tool import Tool
from models.tool_choice import ToolChoice
from typing import Optional, Set
from typing_extensions import Self

class LiteAgentRunRequest(BaseModel):
    """
    The main request object for running the Cortex agent. Contains all necessary information for processing a user query. 
    """ # noqa: E501
    models: Optional[LiteAgentRunRequestModels] = None
    instructions: Optional[LiteAgentRunRequestInstructions] = None
    messages: Annotated[List[Message], Field(min_length=1)] = Field(description="The conversation history and current message. Contains both user queries and assistant responses in chronological order. ")
    tools: Optional[List[Tool]] = Field(default=None, description="List of tools available for the agent to use. Tools may have a corresponding configuration in tool_resources. ")
    tool_resources: Optional[Dict[str, Any]] = Field(default=None, description="Configuration for each tool referenced in the tools array. Keys must match the name field of tools. ")
    tool_choice: Optional[ToolChoice] = None
    thread_id: Optional[StrictInt] = Field(default=None, description="The id of the thread. ")
    parent_message_id: Optional[StrictInt] = Field(default=None, description="The id of the message from which this run should begin. ")
    experimental: Optional[Dict[str, Any]] = Field(default=None, description="reserved")
    __properties: ClassVar[List[str]] = ["models", "instructions", "messages", "tools", "tool_resources", "tool_choice", "thread_id", "parent_message_id", "experimental"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiteAgentRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of models
        if self.models:
            _dict['models'] = self.models.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructions
        if self.instructions:
            _dict['instructions'] = self.instructions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of tool_choice
        if self.tool_choice:
            _dict['tool_choice'] = self.tool_choice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiteAgentRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "models": LiteAgentRunRequestModels.from_dict(obj["models"]) if obj.get("models") is not None else None,
            "instructions": LiteAgentRunRequestInstructions.from_dict(obj["instructions"]) if obj.get("instructions") is not None else None,
            "messages": [Message.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "tools": [Tool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None,
            "tool_resources": obj.get("tool_resources"),
            "tool_choice": ToolChoice.from_dict(obj["tool_choice"]) if obj.get("tool_choice") is not None else None,
            "thread_id": obj.get("thread_id"),
            "parent_message_id": obj.get("parent_message_id"),
            "experimental": obj.get("experimental")
        })
        return _obj


