# coding: utf-8

"""
    Cortex Agent REST API

    OpenAPI 3.1 specification for the Cortex Agent REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@snowflake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from models.cortex_analyst_suggestion_delta import CortexAnalystSuggestionDelta
from models.result_set import ResultSet
from typing import Optional, Set
from typing_extensions import Self

class CortexAnalystToolResultDelta(BaseModel):
    """
    CortexAnalystToolResultDelta
    """ # noqa: E501
    text: Optional[StrictStr] = Field(default=None, description="A text delta from Cortex Analyst's final response.")
    think: Optional[StrictStr] = Field(default=None, description="A text delta from Cortex Analyst's reasoning steps.")
    sql: Optional[StrictStr] = Field(default=None, description="A delta from Cortex Analyst's SQL output. Currently, the entire SQL query comes in a single event but we may stream the SQL token-by-token in the future.")
    sql_explanation: Optional[StrictStr] = Field(default=None, description="A delta from Cortex Analyst's explanation of what the SQL query does")
    query_id: Optional[StrictStr] = Field(default=None, description="The query id once SQL execution begins")
    verified_query_used: Optional[StrictBool] = Field(default=None, description="Whether a verified query was used to generate this response")
    result_set: Optional[ResultSet] = Field(default=None, description="The results from SQL execution. Matches the schema from Snowflake's SQL API ResultSet (https://docs.snowflake.com/en/developer-guide/sql-api/reference)")
    suggestions: Optional[CortexAnalystSuggestionDelta] = Field(default=None, description="A delta from Cortex Analyst's suggested questions. This is sent when Analyst cannot answer the question due to missing information or other failures.")
    __properties: ClassVar[List[str]] = ["text", "think", "sql", "sql_explanation", "query_id", "verified_query_used", "result_set", "suggestions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CortexAnalystToolResultDelta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result_set
        if self.result_set:
            _dict['result_set'] = self.result_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggestions
        if self.suggestions:
            _dict['suggestions'] = self.suggestions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CortexAnalystToolResultDelta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "think": obj.get("think"),
            "sql": obj.get("sql"),
            "sql_explanation": obj.get("sql_explanation"),
            "query_id": obj.get("query_id"),
            "verified_query_used": obj.get("verified_query_used"),
            "result_set": ResultSet.from_dict(obj["result_set"]) if obj.get("result_set") is not None else None,
            "suggestions": CortexAnalystSuggestionDelta.from_dict(obj["suggestions"]) if obj.get("suggestions") is not None else None
        })
        return _obj


